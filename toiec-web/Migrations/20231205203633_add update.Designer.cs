// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using toiec_web.Models;

#nullable disable

namespace toiec_web.Migrations
{
    [DbContext(typeof(ToiecDbContext))]
    [Migration("20231205203633_add update")]
    partial class addupdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8111cfd6-214a-4694-a13c-c6ec3d7f56b2",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "1257b8ad-564a-456f-81a1-d38f180ddd63",
                            ConcurrencyStamp = "2",
                            Name = "Student",
                            NormalizedName = "Student"
                        },
                        new
                        {
                            Id = "35564c0c-f6fc-4ce5-ad98-f3c362e90ed1",
                            ConcurrencyStamp = "3",
                            Name = "VipStudent",
                            NormalizedName = "VipStudent"
                        },
                        new
                        {
                            Id = "9faf18a9-5a41-4b13-9db3-63246839aea9",
                            ConcurrencyStamp = "4",
                            Name = "Professor",
                            NormalizedName = "Professor"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("toiec_web.Data.ResetPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("InsertDateTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResetPasswords");
                });

            modelBuilder.Entity("toiec_web.Data.ScoreParam", b =>
                {
                    b.Property<int>("correctAnswers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("correctAnswers"), 1L, 1);

                    b.Property<int>("listenningScore")
                        .HasColumnType("int");

                    b.Property<int>("readingScore")
                        .HasColumnType("int");

                    b.HasKey("correctAnswers");

                    b.ToTable("ScoreParams");
                });

            modelBuilder.Entity("toiec_web.Data.TestPart", b =>
                {
                    b.Property<Guid>("partId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("partName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("partId");

                    b.ToTable("TestParts");

                    b.HasData(
                        new
                        {
                            partId = new Guid("aece01aa-4fe8-47a9-ba69-5a20ab0a67d6"),
                            partName = "Part 1"
                        },
                        new
                        {
                            partId = new Guid("a9986cb0-3e04-498c-b85f-d647dcad7760"),
                            partName = "Part 2"
                        },
                        new
                        {
                            partId = new Guid("c40fdf03-f171-472f-aecf-43141d5e25ee"),
                            partName = "Part 3"
                        },
                        new
                        {
                            partId = new Guid("f1a0073a-a0d8-4053-9176-3cdf7f54c3da"),
                            partName = "Part 4"
                        },
                        new
                        {
                            partId = new Guid("63152fce-ef3d-4873-91ea-06e799fba05a"),
                            partName = "Part 5"
                        },
                        new
                        {
                            partId = new Guid("bf3272a0-81d7-451c-a4ad-4803d2f8ff7f"),
                            partName = "Part 6"
                        },
                        new
                        {
                            partId = new Guid("f1d383cf-4023-41db-9bee-20832cf31fd5"),
                            partName = "Part 7"
                        });
                });

            modelBuilder.Entity("toiec_web.Models.Admin", b =>
                {
                    b.Property<Guid>("idAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("idUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idAdmin");

                    b.HasIndex("idUser")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("toiec_web.Models.AnswerQuestion", b =>
                {
                    b.Property<Guid>("idAnswer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionidQuestion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("idQuestion")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("idAnswer");

                    b.HasIndex("QuestionidQuestion");

                    b.ToTable("AnswerQuestions");
                });

            modelBuilder.Entity("toiec_web.Models.Comment", b =>
                {
                    b.Property<Guid>("idComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("idPost")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("idUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idComment");

                    b.HasIndex("idPost");

                    b.HasIndex("idUser");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("toiec_web.Models.Course", b =>
                {
                    b.Property<Guid>("idCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("idProfessor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCourse");

                    b.HasIndex("idProfessor");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("toiec_web.Models.Lesson", b =>
                {
                    b.Property<Guid>("idLesson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("idCourse")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idLesson");

                    b.HasIndex("idCourse");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("toiec_web.Models.Payment", b =>
                {
                    b.Property<Guid>("idPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idMethod")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idPackage")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("paymentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("paymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("idPayment");

                    b.HasIndex("idMethod");

                    b.HasIndex("idPackage");

                    b.HasIndex("idStudent");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("toiec_web.Models.PaymentMethod", b =>
                {
                    b.Property<Guid>("idMethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idMethod");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("toiec_web.Models.Post", b =>
                {
                    b.Property<Guid>("idPost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("idUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idPost");

                    b.HasIndex("idUser");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("toiec_web.Models.Professor", b =>
                {
                    b.Property<Guid>("idProfessor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("idUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idProfessor");

                    b.HasIndex("idUser")
                        .IsUnique();

                    b.ToTable("Professors");
                });

            modelBuilder.Entity("toiec_web.Models.Question", b =>
                {
                    b.Property<Guid>("idQuestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("choice_1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("choice_2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("choice_3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("choice_4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("explaination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("idProfessor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("idQuiz")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("idUnit")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("idQuestion");

                    b.HasIndex("idProfessor");

                    b.HasIndex("idQuiz");

                    b.HasIndex("idUnit");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("toiec_web.Models.Quiz", b =>
                {
                    b.Property<Guid>("idQuiz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idLesson")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idQuiz");

                    b.HasIndex("idLesson");

                    b.ToTable("Quizs");
                });

            modelBuilder.Entity("toiec_web.Models.Report", b =>
                {
                    b.Property<Guid>("idReport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idAdmin")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idPost")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("idUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isCheck")
                        .HasColumnType("bit");

                    b.Property<string>("reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("reportDate")
                        .HasColumnType("datetime2");

                    b.HasKey("idReport");

                    b.HasIndex("idAdmin");

                    b.HasIndex("idPost");

                    b.HasIndex("idUser");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("toiec_web.Models.Student", b =>
                {
                    b.Property<Guid>("idStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("freeTest")
                        .HasColumnType("bit");

                    b.Property<string>("idUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idStudent");

                    b.HasIndex("idUser")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("toiec_web.Models.Test", b =>
                {
                    b.Property<Guid>("idTest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("idProfessor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("useDate")
                        .HasColumnType("datetime2");

                    b.HasKey("idTest");

                    b.HasIndex("idProfessor");

                    b.HasIndex("idType");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("toiec_web.Models.TestQuestionUnit", b =>
                {
                    b.Property<Guid>("idQuestionUnit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("audio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("idTest")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idTestPart")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paragraph")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("script")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("translation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idQuestionUnit");

                    b.HasIndex("idTest");

                    b.HasIndex("idTestPart");

                    b.ToTable("TestQuestionUnits");
                });

            modelBuilder.Entity("toiec_web.Models.TestRecord", b =>
                {
                    b.Property<Guid>("idRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("idStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idTest")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("score")
                        .HasColumnType("float");

                    b.HasKey("idRecord");

                    b.HasIndex("idStudent");

                    b.HasIndex("idTest");

                    b.ToTable("TestRecords");
                });

            modelBuilder.Entity("toiec_web.Models.TestType", b =>
                {
                    b.Property<Guid>("idTestType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("typeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idTestType");

                    b.ToTable("TestTypes");

                    b.HasData(
                        new
                        {
                            idTestType = new Guid("86373e27-a594-4075-b2fa-340b5055adb2"),
                            typeName = "Mini Test"
                        },
                        new
                        {
                            idTestType = new Guid("fe3844c1-6886-43ea-bd20-b35bbf38e1c0"),
                            typeName = "Full Test"
                        });
                });

            modelBuilder.Entity("toiec_web.Models.UserAnswer", b =>
                {
                    b.Property<Guid>("idUAnswer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idQuestion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idRecord")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("state")
                        .HasColumnType("bit");

                    b.Property<string>("userChoice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idUAnswer");

                    b.HasIndex("idQuestion");

                    b.HasIndex("idRecord");

                    b.HasIndex("idStudent");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("toiec_web.Models.VipPackage", b =>
                {
                    b.Property<Guid>("idPackage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<Guid>("idAdmin")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.HasKey("idPackage");

                    b.HasIndex("idAdmin");

                    b.ToTable("VipPackages");
                });

            modelBuilder.Entity("toiec_web.Models.VipStudent", b =>
                {
                    b.Property<Guid>("idVipStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("vipExpire")
                        .HasColumnType("datetime2");

                    b.HasKey("idVipStudent");

                    b.HasIndex("idStudent")
                        .IsUnique();

                    b.ToTable("VipStudents");
                });

            modelBuilder.Entity("toiec_web.Models.Vocabulary", b =>
                {
                    b.Property<Guid>("idVoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("engWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("idProfessor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idTopic")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("meaning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("wordType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idVoc");

                    b.HasIndex("idProfessor");

                    b.HasIndex("idTopic");

                    b.ToTable("Vocabularies");
                });

            modelBuilder.Entity("toiec_web.Models.VocTopic", b =>
                {
                    b.Property<Guid>("idVocTopic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idProfessor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idVocTopic");

                    b.HasIndex("idProfessor");

                    b.ToTable("VocabularyTopics");
                });

            modelBuilder.Entity("toiec_web.Models.Users", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("toiec_web.Models.Admin", b =>
                {
                    b.HasOne("toiec_web.Models.Users", "Users")
                        .WithOne("Admin")
                        .HasForeignKey("toiec_web.Models.Admin", "idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AdminOfUser");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("toiec_web.Models.AnswerQuestion", b =>
                {
                    b.HasOne("toiec_web.Models.Question", "Question")
                        .WithMany("AnswerQuestions")
                        .HasForeignKey("QuestionidQuestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("toiec_web.Models.Comment", b =>
                {
                    b.HasOne("toiec_web.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("idPost")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CommentsOfPost");

                    b.HasOne("toiec_web.Models.Users", "Users")
                        .WithMany("Comments")
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CommentsOfUser");

                    b.Navigation("Post");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("toiec_web.Models.Course", b =>
                {
                    b.HasOne("toiec_web.Models.Professor", "Professor")
                        .WithMany("Courses")
                        .HasForeignKey("idProfessor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CourseOfProfessor");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("toiec_web.Models.Lesson", b =>
                {
                    b.HasOne("toiec_web.Models.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("idCourse")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_LessonOfCourse");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("toiec_web.Models.Payment", b =>
                {
                    b.HasOne("toiec_web.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("idMethod")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PaymentOfMethod");

                    b.HasOne("toiec_web.Models.VipPackage", "VipPackage")
                        .WithMany("Payments")
                        .HasForeignKey("idPackage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PaymentOfVipPackage");

                    b.HasOne("toiec_web.Models.Student", "Student")
                        .WithMany("Payments")
                        .HasForeignKey("idStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PaymentOfStudent");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Student");

                    b.Navigation("VipPackage");
                });

            modelBuilder.Entity("toiec_web.Models.Post", b =>
                {
                    b.HasOne("toiec_web.Models.Users", "Users")
                        .WithMany("Posts")
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PostOfUser");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("toiec_web.Models.Professor", b =>
                {
                    b.HasOne("toiec_web.Models.Users", "Users")
                        .WithOne("Professor")
                        .HasForeignKey("toiec_web.Models.Professor", "idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProfessorOfUser");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("toiec_web.Models.Question", b =>
                {
                    b.HasOne("toiec_web.Models.Professor", "Professor")
                        .WithMany("Questions")
                        .HasForeignKey("idProfessor")
                        .IsRequired()
                        .HasConstraintName("FK_QuestionsOfProfessor");

                    b.HasOne("toiec_web.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("idQuiz")
                        .HasConstraintName("FK_QuestionsOfQuiz");

                    b.HasOne("toiec_web.Models.TestQuestionUnit", "TestQuestionUnit")
                        .WithMany("Questions")
                        .HasForeignKey("idUnit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_QuestionsOfUnit");

                    b.Navigation("Professor");

                    b.Navigation("Quiz");

                    b.Navigation("TestQuestionUnit");
                });

            modelBuilder.Entity("toiec_web.Models.Quiz", b =>
                {
                    b.HasOne("toiec_web.Models.Lesson", "Lesson")
                        .WithMany("Quizzes")
                        .HasForeignKey("idLesson")
                        .IsRequired()
                        .HasConstraintName("FK_QuizzesOfLesson");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("toiec_web.Models.Report", b =>
                {
                    b.HasOne("toiec_web.Models.Admin", "Admin")
                        .WithMany("Reports")
                        .HasForeignKey("idAdmin")
                        .IsRequired()
                        .HasConstraintName("FK_AdminCheckReport");

                    b.HasOne("toiec_web.Models.Post", "Post")
                        .WithMany("Reports")
                        .HasForeignKey("idPost")
                        .IsRequired()
                        .HasConstraintName("FK_ReportsOfPost");

                    b.HasOne("toiec_web.Models.Users", "Users")
                        .WithMany("Reports")
                        .HasForeignKey("idUser")
                        .IsRequired()
                        .HasConstraintName("FK_ReportsOfUser");

                    b.Navigation("Admin");

                    b.Navigation("Post");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("toiec_web.Models.Student", b =>
                {
                    b.HasOne("toiec_web.Models.Users", "Users")
                        .WithOne("Student")
                        .HasForeignKey("toiec_web.Models.Student", "idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentOfUser");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("toiec_web.Models.Test", b =>
                {
                    b.HasOne("toiec_web.Models.Professor", "Professor")
                        .WithMany("Tests")
                        .HasForeignKey("idProfessor")
                        .IsRequired()
                        .HasConstraintName("TestOfProfessor");

                    b.HasOne("toiec_web.Models.TestType", "TestType")
                        .WithMany("Tests")
                        .HasForeignKey("idType")
                        .IsRequired()
                        .HasConstraintName("TypeTest");

                    b.Navigation("Professor");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("toiec_web.Models.TestQuestionUnit", b =>
                {
                    b.HasOne("toiec_web.Models.Test", "Test")
                        .WithMany("TestQuestionUnits")
                        .HasForeignKey("idTest")
                        .IsRequired()
                        .HasConstraintName("FK_UnitsOfTest");

                    b.HasOne("toiec_web.Data.TestPart", "TestPart")
                        .WithMany("TestQuestionUnits")
                        .HasForeignKey("idTestPart")
                        .IsRequired()
                        .HasConstraintName("FK_UnitOfTestPart");

                    b.Navigation("Test");

                    b.Navigation("TestPart");
                });

            modelBuilder.Entity("toiec_web.Models.TestRecord", b =>
                {
                    b.HasOne("toiec_web.Models.Student", "Student")
                        .WithMany("TestRecords")
                        .HasForeignKey("idStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RecordOfStudent");

                    b.HasOne("toiec_web.Models.Test", "Test")
                        .WithMany("TestRecords")
                        .HasForeignKey("idTest")
                        .IsRequired()
                        .HasConstraintName("RecordOfTest");

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("toiec_web.Models.UserAnswer", b =>
                {
                    b.HasOne("toiec_web.Models.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("idQuestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AnswerOfQuestion");

                    b.HasOne("toiec_web.Models.TestRecord", "TestRecord")
                        .WithMany("UserAnswers")
                        .HasForeignKey("idRecord")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RecordAnswer");

                    b.HasOne("toiec_web.Models.Student", "Student")
                        .WithMany("UserAnswers")
                        .HasForeignKey("idStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AnswerOfStudent");

                    b.Navigation("Question");

                    b.Navigation("Student");

                    b.Navigation("TestRecord");
                });

            modelBuilder.Entity("toiec_web.Models.VipPackage", b =>
                {
                    b.HasOne("toiec_web.Models.Admin", "Admin")
                        .WithMany("VipPackages")
                        .HasForeignKey("idAdmin")
                        .IsRequired()
                        .HasConstraintName("FK_ManageVipPackage");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("toiec_web.Models.VipStudent", b =>
                {
                    b.HasOne("toiec_web.Models.Student", "Student")
                        .WithOne("VipStudent")
                        .HasForeignKey("toiec_web.Models.VipStudent", "idStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VipStudentOfStudent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("toiec_web.Models.Vocabulary", b =>
                {
                    b.HasOne("toiec_web.Models.Professor", "Professor")
                        .WithMany("Vocabularies")
                        .HasForeignKey("idProfessor")
                        .IsRequired()
                        .HasConstraintName("FK_VocOfProfessor");

                    b.HasOne("toiec_web.Models.VocTopic", "VocTopic")
                        .WithMany("Vocabularies")
                        .HasForeignKey("idTopic")
                        .IsRequired()
                        .HasConstraintName("FK_VocOfTopic");

                    b.Navigation("Professor");

                    b.Navigation("VocTopic");
                });

            modelBuilder.Entity("toiec_web.Models.VocTopic", b =>
                {
                    b.HasOne("toiec_web.Models.Professor", "Professor")
                        .WithMany("VocTopics")
                        .HasForeignKey("idProfessor")
                        .IsRequired()
                        .HasConstraintName("FK_TopicOfProfessor");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("toiec_web.Data.TestPart", b =>
                {
                    b.Navigation("TestQuestionUnits");
                });

            modelBuilder.Entity("toiec_web.Models.Admin", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("VipPackages");
                });

            modelBuilder.Entity("toiec_web.Models.Course", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("toiec_web.Models.Lesson", b =>
                {
                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("toiec_web.Models.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("toiec_web.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("toiec_web.Models.Professor", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Questions");

                    b.Navigation("Tests");

                    b.Navigation("VocTopics");

                    b.Navigation("Vocabularies");
                });

            modelBuilder.Entity("toiec_web.Models.Question", b =>
                {
                    b.Navigation("AnswerQuestions");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("toiec_web.Models.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("toiec_web.Models.Student", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("TestRecords");

                    b.Navigation("UserAnswers");

                    b.Navigation("VipStudent")
                        .IsRequired();
                });

            modelBuilder.Entity("toiec_web.Models.Test", b =>
                {
                    b.Navigation("TestQuestionUnits");

                    b.Navigation("TestRecords");
                });

            modelBuilder.Entity("toiec_web.Models.TestQuestionUnit", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("toiec_web.Models.TestRecord", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("toiec_web.Models.TestType", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("toiec_web.Models.VipPackage", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("toiec_web.Models.VocTopic", b =>
                {
                    b.Navigation("Vocabularies");
                });

            modelBuilder.Entity("toiec_web.Models.Users", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Comments");

                    b.Navigation("Posts");

                    b.Navigation("Professor")
                        .IsRequired();

                    b.Navigation("Reports");

                    b.Navigation("Student")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
